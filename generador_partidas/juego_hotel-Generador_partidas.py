# -*- coding: utf-8 -*-
"""juego_hotel-Generador_partidas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KEqghfPGeuk9u5u8_s531CCb7869Hn3u

# Generador de partidas aleatorias - Juego Hotel
"""

import pathlib
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import random
import time

df = pd.read_excel("Plantilla_Partidas_Hotel.xlsx")
df

class Tablero:
  def __init__(self, dinero_banca, num_jugadores):
    self.entradas_casillas = {1:"", 2:"", 3:"",4:"", 5:"", 6:"", 7:"", 8:"", 9:"", 10:"", 
                              11:"", 12:"", 13:"", 14:"", 15:"", 16:"", 17:"", 18:"", 19:"", 20:"",
                              21: "", 22:"", 23:"", 24:"", 25:"", 26:"", 27:"", 28:"", 29:"", 30:""}
    self.num_jugadores = num_jugadores
    self.dinero_banca = dinero_banca - (12000 * num_jugadores) #Saldo inicial de la banca, tras repartir el dinero inicial a los jugadores

  def tirar_dado(self):
    return random.randint(1,6)

  def tirar_dado_const(self):
    dado_const = ["gratis", "denegada", "aceptada", "aceptada", "aceptada", "doble"]
    pos = random.randint(0,len(dado_const)-1)
    return dado_const[pos]

  def valor_casilla(self, casilla):
    casillas = {1:"salida", 2:"construye", 3:"compra",4:"construye", 5:"compra", 6:"construye", 7:"entrada", 8:"compra", 9:"compra", 10:"edificio", 
                11:"compra", 12:"construye", 13:"compra", 14:"construye", 15:"compra", 16:"construye", 17:"compra", 18:"entrada", 19:"construye", 20:"compra",
                21: "compra", 22:"construye", 23:"compra", 24:"edificio", 25:"construye", 26:"construye", 27:"construye", 28:"compra", 29:"entrada", 30:"construye"}
    return casillas[casilla]

  def colocar_entrada(self, casilla, propiedad):
    if self.entradas_casillas[casilla] == "":
      self.entradas_casillas[casilla] = propiedad
      return True
    else:
      return False

class Jugador:
  def __init__(self, nombre):
    self.nombre = nombre
    self.propiedades = []
    self.dinero = 12000
    self.casilla_actual = 0
    self.entradas_sin_propiedad = 0
    self.cobrado_2000_en_ronda = False
    self.comprado_entradas_en_ronda = False

  def comprar_propiedad(self, propiedad):
    self.propiedades.append(propiedad)

  def vender_propiedad(self, propiedad):
    self.propiedades.remove(propiedad)
  
  def cobrar(self, cantidad):
    self.dinero += cantidad

  def pagar(self, cantidad):
    self.dinero -= cantidad

  def mover(self, valor_dados):
    for jugador in juego.jugadores:
      if jugador.casilla_actual == self.casilla_actual + valor_dados:
        valor_dados += 1

    if (self.casilla_actual + valor_dados) <= 30:
      self.casilla_actual += valor_dados
    else:
      self.casilla_actual += valor_dados
      self.casilla_actual -= 30
      self.cobrado_2000_en_ronda = False
      self.comprado_entradas_en_ronda = False

    #Pasa por la casilla de cobro 2000
    if not self.cobrado_2000_en_ronda and self.casilla_actual > 7 and self.casilla_actual <= 13 and juego.tablero.dinero_banca >= 2000:
      juego.tablero.dinero_banca -= 2000
      self.cobrar(2000)
      self.cobrado_2000_en_ronda = True

    #Pasa por la casilla de cobro comprar entradas
    if not self.comprado_entradas_en_ronda and self.casilla_actual > 24 and self.casilla_actual <= 30:
      self.comprado_entradas_en_ronda = True
      self.comprar_entradas(False)  

    #Paga noches
    if juego.tablero.entradas_casillas[self.casilla_actual] != "":
      if juego.tablero.entradas_casillas[self.casilla_actual] in self.propiedades:
        if 'operacion_jugador' in juego.registro.keys():
          cadena = juego.registro['operacion_jugador']
          cadena += ", " + "No pago noches es mi propiedad"
          juego.registro.update(operacion_jugador = cadena)
        else:
          if 'operacion_jugador' in juego.registro.keys():
            cadena = juego.registro['operacion_jugador']
            cadena += ", " + "No pago noches es mi propiedad"
            juego.registro.update(operacion_jugador = cadena)
          else:
            juego.registro.update(operacion_jugador = "No pago noches es mi propiedad")
        print("No pago noches es mi propiedad")
      else:
        self.pagar_noches(juego.tablero.entradas_casillas[self.casilla_actual])

# ---------------------- OPERACIONES JUGADOR -------------------------- #

  def operar(self):
    propiedades_casilla = [] # propiedades a los lados
    for prop in juego.propiedades:
      if prop.is_casilla(self.casilla_actual):
        propiedades_casilla.append(prop)

    if len(propiedades_casilla) > 0: #Estoy en una casilla que tiene propiedades a los lados
      if juego.tablero.valor_casilla(self.casilla_actual) == "compra":
        return self.comprar_propiedad(propiedades_casilla)
      elif juego.tablero.valor_casilla(self.casilla_actual) == "construye":
        return self.construir_propiedad(propiedades_casilla)
      elif juego.tablero.valor_casilla(self.casilla_actual) == "edificio":
        if len(self.propiedades) > 0:
          prop_gratis = random.randint(0,len(self.propiedades)-1)
          self.propiedades[prop_gratis].comprar_edificio()
          if 'operacion_jugador' in juego.registro.keys():
            cadena = juego.registro['operacion_jugador']
            cadena += ", " + "Construyo un edificio gratis"
            juego.registro.update(operacion_jugador = cadena)
          else:
            juego.registro.update(operacion_jugador = "Construyo un edificio gratis")
          return "Se ha construido gratis en el " + self.propiedades[prop_gratis].nombre
        else:
          if 'operacion_jugador' in juego.registro.keys():
            cadena = juego.registro['operacion_jugador']
            cadena += ", " + "No tiene propiedades para construir gratis"
            juego.registro.update(operacion_jugador = cadena)
          else:
            juego.registro.update(operacion_jugador = "No tiene propiedades para construir gratis")
          return "No tiene propiedades para construir gratis"
      elif juego.tablero.valor_casilla(self.casilla_actual) == "entrada":
        if 'operacion_jugador' in juego.registro.keys():
          cadena = juego.registro['operacion_jugador']
          cadena += ", " + "Entrada gratis"
          juego.registro.update(operacion_jugador = cadena)
        else:
          juego.registro.update(operacion_jugador = "Entrada gratis")
        return self.comprar_entradas(True)
      else:
        return "Casilla mal identificada"
    # Estoy en una casilla que no tiene propiedades a los lados
    else:
      if 'operacion_jugador' in juego.registro.keys():
        cadena = juego.registro['operacion_jugador']
        cadena += ", " + "No hago nada"
        juego.registro.update(operacion_jugador = cadena)
      else:
        juego.registro.update(operacion_jugador = "No hago nada")
      return "No hago nada"

  def comprar_entradas(self, gratis):
    if len(self.propiedades) > 0:
      prop_entrada = random.randint(0,len(self.propiedades)-1)
      casilla_entrada = int(random.choice(self.propiedades[prop_entrada].casillas))
      
      # Coloco todas las entredas que me regalaron cuando no tenÃ­a propiedades
      if self.entradas_sin_propiedad > 0:
        print("Tengo " + str(self.entradas_sin_propiedad) + " entradas gratuitas, pendiente de asignar")
        for i in range(self.entradas_sin_propiedad):
          self.entradas_sin_propiedad -=1
          for p in self.propiedades:
            if p.edificios_construidos > 0:
              casilla_entrada = int(random.choice(p.casillas))
              while juego.tablero.colocar_entrada(casilla_entrada, p):
                if 'compra_entradas' in juego.registro.keys():
                  cadena = juego.registro['compra_entradas']
                  cadena += ", " + p.nombre
                  juego.registro.update(compra_entradas = cadena)
                else:
                  juego.registro.update(compra_entradas = p.nombre)
                print("Coloco entrada gratuita para", p.nombre, "en la casilla", casilla_entrada)                
              #else:
                #print("No hay casillas disponibles para poner su entrada gratuita")

      # Coloco la entrada que me regalan
      if gratis:
        if self.propiedades[prop_entrada].edificios_construidos > 0 and "" in juego.tablero.entradas_casillas.values():
          while juego.tablero.colocar_entrada(casilla_entrada, self.propiedades[prop_entrada]):
            if 'compra_entradas' in juego.registro.keys():
              cadena = juego.registro['compra_entradas']
              cadena += ", " + self.propiedades[prop_entrada].nombre
              juego.registro.update(compra_entradas = cadena)
            else:
              juego.registro.update(compra_entradas = self.propiedades[prop_entrada].nombre)
            print("Coloco entrada gratuita para", self.propiedades[prop_entrada].nombre, "en la casilla", casilla_entrada)
          else:
            if 'operacion_jugador' in juego.registro.keys():
              cadena = juego.registro['operacion_jugador']
              cadena += ", " + "Entradas gratis sin propiedad"
              juego.registro.update(operacion_jugador = cadena)
            else:
              juego.registro.update(operacion_jugador = "Entradas gratis sin propiedad")
            print("No hay casillas disponibles para poner su entrada gratuita")
        else:
          self.entradas_sin_propiedad += 1
          if 'operacion_jugador' in juego.registro.keys():
            cadena = juego.registro['operacion_jugador']
            cadena += ", " + "Entradas gratis sin propiedad"
            juego.registro.update(operacion_jugador = cadena)
          else:
            juego.registro.update(operacion_jugador = "Entradas gratis sin propiedad")
          return "Entradas gratis sin propiedad"        
      # Coloco las entradas que compro, una por propiedad
      else:
        for p in self.propiedades:
          if p.edificios_construidos > 0:
            casilla_entrada = int(random.choice(p.casillas))
            while juego.tablero.colocar_entrada(casilla_entrada, p):
              self.pagar(p.precio_entrada)
              if 'compra_entradas' in juego.registro.keys():
                cadena = juego.registro['compra_entradas']
                cadena += ", " + p.nombre
                juego.registro.update(compra_entradas = cadena)
              else:
                juego.registro.update(compra_entradas = p.nombre)
              print("Coloco entrada comprada para", p.nombre, "a", p.precio_entrada, "en la casilla", casilla_entrada)
            else:
              print("No puede comprar mÃ¡s entradas para el", p.nombre)

  def comprar_propiedad(self, propiedades_casilla):
    comprar = random.randint(0,1)
    prop_compra = random.randint(0,len(propiedades_casilla)-1)
        
    if (propiedades_casilla[prop_compra] not in self.propiedades) and (propiedades_casilla[prop_compra].edificios_construidos == 0): # Compruebo que no es mia la propiedad o ya estÃ¡ comprada
      if comprar:
        if propiedades_casilla[prop_compra].propietario != '': # Es expropiaciÃ³n forzosa
          if self.dinero > (propiedades_casilla[prop_compra].precio_terreno / 2):
            self.pagar(propiedades_casilla[prop_compra].precio_terreno / 2)
            self.propiedades.append(propiedades_casilla[prop_compra])
            propiedades_casilla[prop_compra].propietario = self.nombre
            # Elimina la propiedad del jugador que la tenÃ­a anteriormente
            for j in juego.jugadores:
              if propiedades_casilla[prop_compra] in j.propiedades and j.nombre != self.nombre:
                j.propiedades.remove(propiedades_casilla[prop_compra])
                j.cobrar(propiedades_casilla[prop_compra].precio_terreno / 2)
            if 'operacion_jugador' in juego.registro.keys():
              cadena = juego.registro['operacion_jugador']
              cadena += ", " + "Compro propiedad por expropiaciÃ³n forzosa"
              juego.registro.update(operacion_jugador = cadena)
            else:
              juego.registro.update(operacion_jugador = "Compro propiedad por expropiaciÃ³n forzosa")
            juego.registro.update(compra = "si")
            juego.registro.update(propiedad_compra = propiedades_casilla[prop_compra].nombre)
            return "Voy a comprar " + propiedades_casilla[prop_compra].nombre
          else:
            return "No tengo dinero para comprar " + propiedades_casilla[prop_compra].nombre          
        else:
          if self.dinero > propiedades_casilla[prop_compra].precio_terreno:
            self.pagar(propiedades_casilla[prop_compra].precio_terreno)
            self.propiedades.append(propiedades_casilla[prop_compra])
            propiedades_casilla[prop_compra].propietario = self.nombre
            if 'operacion_jugador' in juego.registro.keys():
              cadena = juego.registro['operacion_jugador']
              cadena += ", " + "Compro propiedad"
              juego.registro.update(operacion_jugador = cadena)
            else:
              juego.registro.update(operacion_jugador = "Compro propiedad")
            juego.registro.update(compra = "si")
            juego.registro.update(propiedad_compra = propiedades_casilla[prop_compra].nombre)
            return "Voy a comprar " + propiedades_casilla[prop_compra].nombre
          else:
            return "No tengo dinero para comprar " + propiedades_casilla[prop_compra].nombre
      else:
        if 'operacion_jugador' in juego.registro.keys():
          cadena = juego.registro['operacion_jugador']
          cadena += ", " + "No compra"
          juego.registro.update(operacion_jugador = cadena)
        else:
          juego.registro.update(operacion_jugador = "No compro")
          juego.registro.update(compra = "no")
        return "No voy a comprar " + propiedades_casilla[prop_compra].nombre  
    else:
      if 'operacion_jugador' in juego.registro.keys():
        cadena = juego.registro['operacion_jugador']
        cadena += ", " + "No compro esta propiedad es mÃ­a"
        juego.registro.update(operacion_jugador = cadena)
      else:
        juego.registro.update(operacion_jugador = "No compro esta propiedad es mÃ­a")
      juego.registro.update(compra = "no")
      return "Ya tengo o no es mÃ­a esta propiedad " + propiedades_casilla[prop_compra].nombre

  def construir_propiedad(self, propiedades_casilla):
    construir = juego.tablero.tirar_dado_const()
    prop_construir = random.randint(0,len(propiedades_casilla)-1)

    if propiedades_casilla[prop_construir] in self.propiedades: # Compruebo que es mia la propiedad
      juego.registro.update(construye = "si")
      if (propiedades_casilla[prop_construir].precio_edificio() * 2) <= self.dinero:
        if construir == "gratis":
          if propiedades_casilla[prop_construir].comprar_edificio() != "no":
            if 'operacion_jugador' in juego.registro.keys():
              cadena = juego.registro['operacion_jugador']
              cadena += ", " + "Construyo un edificio gratis"
              juego.registro.update(operacion_jugador = cadena)
            else:
              juego.registro.update(operacion_jugador = "Construyo un edificio gratis")
            return "Construyo gratis " + propiedades_casilla[prop_construir].nombre
          else:
            if 'operacion_jugador' in juego.registro.keys():
              cadena = juego.registro['operacion_jugador']
              cadena += ", " + "No tiene mÃ¡s edificios por construir"
              juego.registro.update(operacion_jugador = cadena)
            else:
              juego.registro.update(operacion_jugador = "No tiene mÃ¡s edificios por construir")
            return "No tiene mÃ¡s edificios por construir"
        elif construir == "doble":
          if propiedades_casilla[prop_construir].comprar_edificio() != "no":
            self.pagar(propiedades_casilla[prop_construir].precio_edificio() * 2)
            if 'operacion_jugador' in juego.registro.keys():
              cadena = juego.registro['operacion_jugador']
              cadena += ", " + "Construyo al doble"
              juego.registro.update(operacion_jugador = cadena)
            else:
              juego.registro.update(operacion_jugador = "Construyo al doble")
            return "Construyo al doble " + propiedades_casilla[prop_construir].nombre + " (" + str(propiedades_casilla[prop_construir].precio_edificio() * 2) + ")"
          else:
            return "No hay mÃ¡s edificios por construir"
        elif construir == "aceptada":
          if propiedades_casilla[prop_construir].comprar_edificio() != "no":
            self.pagar(propiedades_casilla[prop_construir].precio_edificio())
            if 'operacion_jugador' in juego.registro.keys():
              cadena = juego.registro['operacion_jugador']
              cadena += ", " + "Construyo al precio normal"
              juego.registro.update(operacion_jugador = cadena)
            else:
              juego.registro.update(operacion_jugador = "Construyo al precio normal")
            return "Construyo al precio normal " + propiedades_casilla[prop_construir].nombre + " (" + str(propiedades_casilla[prop_construir].precio_edificio()) + ")"
          else:
            return "No hay mÃ¡s edificios por construir"
        else:
          if 'operacion_jugador' in juego.registro.keys():
            cadena = juego.registro['operacion_jugador']
            cadena += ", " + "No puedo construir"
            juego.registro.update(operacion_jugador = cadena)
          else:
            juego.registro.update(operacion_jugador = "No puedo construir")
          return "No puedo construir " + propiedades_casilla[prop_construir].nombre
      else:
        if 'operacion_jugador' in juego.registro.keys():
          cadena = juego.registro['operacion_jugador']
          cadena += ", " + "No puedo construir saldo insuficiente"
          juego.registro.update(operacion_jugador = cadena)
        else:
          juego.registro.update(operacion_jugador = "No puedo construir saldo insuficiente")
        juego.registro.update(construye = "no")
        return "No puedo construir " + propiedades_casilla[prop_construir].nombre + " coste " + str(propiedades_casilla[prop_construir].precio_edificio()) + " saldo insuficiente"
    else:
      if 'operacion_jugador' in juego.registro.keys():
        cadena = juego.registro['operacion_jugador']
        cadena += ", " + "No construyo no es mi propiedad"
        juego.registro.update(operacion_jugador = cadena)
      else:
        juego.registro.update(operacion_jugador = "No construyo no es mi propiedad")
      return "No construyo, no es mi propiedad " + propiedades_casilla[prop_construir].nombre

  def pagar_noches(self, propiedad):
    noches = random.randint(1,6)
    precio_noches = propiedad.precio_noche(noches);
    
    if precio_noches:
      while precio_noches > self.dinero and len(self.propiedades) > 0:
        self.subasta()
        juego.registro.update(operacion_jugador = "Se han subastado bienes")
      else:
        self.pagar(precio_noches)
        print(self.nombre, ": Pago", noches, "noches por", precio_noches);

        #Registro de la partida
        juego.registro.update(pago_noches=precio_noches)
        if 'operacion_jugador' in juego.registro.keys():
          cadena = juego.registro['operacion_jugador']
          cadena += ", " + "Pago noches"
          juego.registro.update(operacion_jugador = cadena)
        else:
          juego.registro.update(operacion_jugador = "Pago noches")

        for j in juego.jugadores:
          if propiedad in j.propiedades:
            j.cobrar(precio_noches)
            print(j.nombre,": Cobro", noches, "noches por", precio_noches);
            

  
  def subasta(self):
    prop = random.randint(0,len(self.propiedades)-1)
    precio_edf = self.propiedades[prop].precios_edificios[self.propiedades[prop].num_edificios - 1]    
    if self.propiedades[prop].vender_edificio() != "no":
      self.cobrar(precio_edf)
    else:
      self.cobrar(self.propiedades[prop].precio_terreno / 2) # Precio terreno por expropiaciÃ³n forzosa
      for k,v in juego.tablero.entradas_casillas.items():
        if v != '' and getattr(v, 'nombre') == self.propiedades[prop].nombre: # LiberaciÃ³n de las casillas de las propiedades
          cas = {k:''}
          juego.tablero.entradas_casillas.update(cas)
      self.propiedades[prop].propietario = ''
      self.propiedades.remove(self.propiedades[prop]) # PÃ©rdida de la propiedad

class Propiedad:
  def __init__(self, nombre, casillas, precio_terreno, num_edificios, precio_entrada, precios_edificios, precios_noche):
    self.nombre = nombre
    self.casillas = casillas
    self.propietario = ""
    self.precio_terreno = precio_terreno
    self.num_edificios = num_edificios
    self.edificios_construidos = 0
    self.precio_entrada = precio_entrada
    self.precios_edificios = precios_edificios
    self.precios_noche = precios_noche

  def is_casilla(self, casilla):
    return casilla in self.casillas

  def comprar_edificio(self):
    if self.num_edificios > self.edificios_construidos:
      self.edificios_construidos += 1
    else:
      return "no"

  def vender_edificio(self):
    if self.edificios_construidos > 0:
      self.edificios_construidos -= 1
    else:
      return "no"

  def precio_edificio(self):
    return int(self.precios_edificios[self.num_edificios - 1])

  def precio_noche(self, num_noches):
    if(self.edificios_construidos > 0):
      return self.precios_noche[self.edificios_construidos - 1][num_noches - 1]
    else:
      return False

class Juego:
  def __init__(self, tablero, jugadores, propiedades):
    self.tablero = tablero
    self.jugadores = jugadores
    self.propiedades = propiedades
    self.registro = {}

#InicializaciÃ³n de valores propiedades
casillas_reef_resort          = [3,4,5,6]
terreno_reef_resort           = 500
num_edif_reef_resort          = 2
precio_entrada_reef_resort    = 100
precios_edificios_reef_resort = [1800, 250]
precios_noche_reef_resort     = [[400, 800, 1200, 1600, 2000, 2400],
                                 [600, 1200, 1800, 2400, 3000, 3600]]

casillas_dragon_gate          = [2,3,4,5,6,7]
terreno_dragon_gate           = 1000
num_edif_dragon_gate          = 4
precio_entrada_dragon_gate    = 100
precios_edificios_dragon_gate = [2200, 1400, 1400, 500]
precios_noche_dragon_gate     = [[100, 200, 300, 400, 500, 600],
                                 [100, 200, 300, 400, 500, 600],
                                 [200, 400, 600, 800, 1000, 1200],
                                 [400, 800, 1200, 1600, 2000, 2400]]

casillas_up_town              = [9,10,11,12,13,14,15]
terreno_up_town               = 2500
num_edif_up_town              = 5
precio_entrada_up_town        = 200
precios_edificios_up_town     = [3600, 2600, 1800, 1800, 3000]
precios_noche_up_town         = [[200, 400, 600, 800, 1000, 1200],
                                 [400, 800, 1200, 1600, 2000, 2400],
                                 [600, 1200, 1800, 2400, 3000, 3600],
                                 [800, 1600, 2400, 3200, 4000, 4800],
                                 [1100, 2200, 3300, 4400, 5500, 6600]]

casillas_artika               = [11,12,13,14,15,16,17,18,19,20]
terreno_artika                = 2500
num_edif_artika               = 5
precio_entrada_artika         = 200
precios_edificios_artika      = [3600, 2600, 1800, 1800, 3000]
precios_noche_artika          = [[150, 300, 450, 600, 750, 900],
                                 [300, 600, 900, 1200, 1500, 1800],
                                 [300, 600, 900, 1200, 1500, 1800],
                                 [450, 900, 1350, 1800, 2250, 2700],
                                 [600, 1200, 1800, 2400, 3000, 3600]]

casillas_coconut              = [16,17,18,19,20]
terreno_coconut               = 2500
num_edif_coconut              = 6
precio_entrada_coconut        = 250
precios_edificios_coconut     = [3500, 2500, 2500, 1750, 1750, 2500]
precios_noche_coconut         = [[200, 400, 600, 800, 1000, 1200],
                                 [300, 600, 900, 1200, 1500, 1800],
                                 [350, 700, 1050, 1400, 1750, 2100],
                                 [500, 1000, 1500, 2000, 2500, 3000],
                                 [650, 1300, 1950, 2600, 3250, 3900],
                                 [1000, 2000, 3000, 4000, 5000, 6000]]

casillas_reine                = [8,9,10,21,22,23,24]
terreno_reine                 = 2500
num_edif_reine                = 6
precio_entrada_reine          = 200
precios_edificios_reine       = [3300, 2200, 1800, 1800, 1800, 4000]
precios_noche_reine           = [[150, 300, 450, 600, 750, 900],
                                 [300, 600, 900, 1200, 1500, 1800],
                                 [300, 600, 900, 1200, 1500, 1800],
                                 [300, 600, 900, 1200, 1500, 1800],
                                 [450, 900, 1350, 1800, 2250, 2700],
                                 [750, 1500, 2250, 3000, 3750, 4500]]

casillas_al_walid             = [21,22,23,24,25]
terreno_al_walid              = 1500
num_edif_al_walid             = 4
precio_entrada_al_walid       = 100
precios_edificios_al_walid    = [2400, 1000, 500, 1000]
precios_noche_al_walid        = [[100, 200, 300, 400, 500, 600],
                                 [100, 200, 300, 400, 500, 600],
                                 [200, 400, 600, 800, 1000, 1200],
                                 [400, 800, 1200, 1600, 2000, 2400]]

casillas_zebra_lodge          = [26,27,28,29,30]
terreno_zebra_lodge           = 2000
num_edif_zebra_lodge          = 4
precio_entrada_zebra_lodge    = 150
precios_edificios_zebra_lodge = [2600, 1200, 1200, 2000]
precios_noche_zebra_lodge     = [[100, 200, 300, 400, 500, 600],
                                 [100, 200, 300, 400, 500, 600],
                                 [250, 500, 750, 1000, 1250, 1500],
                                 [500, 1000, 1500, 2000, 2500, 3000]]

dinero_banca                  = 93500

for num_partida in range(500):
  #InicializaciÃ³n valores de la partida
  jugadores = [Jugador("Ruben"), Jugador("Jose"), Jugador("MarÃ­a"), Jugador("Rosa")]
  tablero = Tablero(dinero_banca, len(jugadores))
  propiedades = [Propiedad("Reef Resort", casillas_reef_resort, terreno_reef_resort, num_edif_reef_resort, precio_entrada_reef_resort, precios_edificios_reef_resort, precios_noche_reef_resort),
                Propiedad("Dragon gate", casillas_dragon_gate, terreno_dragon_gate, num_edif_dragon_gate, precio_entrada_dragon_gate, precios_edificios_dragon_gate, precios_noche_dragon_gate),
                Propiedad("Up Town towers", casillas_up_town, terreno_up_town, num_edif_up_town, precio_entrada_up_town, precios_edificios_up_town, precios_noche_up_town),
                Propiedad("Artika", casillas_artika, terreno_artika, num_edif_artika, precio_entrada_artika, precios_edificios_artika, precios_noche_artika),
                Propiedad("Coconut", casillas_coconut, terreno_coconut, num_edif_coconut, precio_entrada_coconut, precios_edificios_coconut, precios_noche_coconut),
                Propiedad("Reine", casillas_reine, terreno_reine, num_edif_reine, precio_entrada_reine, precios_edificios_reine, precios_noche_reine),
                Propiedad("Al Walid", casillas_al_walid, terreno_al_walid, num_edif_al_walid, precio_entrada_al_walid, precios_edificios_al_walid, precios_noche_al_walid),
                Propiedad("Zebra Lodge", casillas_zebra_lodge, terreno_zebra_lodge, num_edif_zebra_lodge, precio_entrada_zebra_lodge, precios_edificios_zebra_lodge, precios_noche_zebra_lodge)]

  juego = Juego(tablero, jugadores, propiedades)

  num_partida +=1
  num_tirada = 0
  jug_bancarrota = 0
  while len(juego.jugadores) > 1:
    for j in juego.jugadores:
      juego.registro.clear()
      num_tirada +=1

      if j.dinero >= 0 and len(j.propiedades) >=0:
        tirada = juego.tablero.tirar_dado()
        j.mover(tirada)
        print(str(num_partida) + "-" + str(num_tirada) + "-> " + j.nombre + ":\tdados\t", tirada, " casilla ", j.casilla_actual, " (", juego.tablero.valor_casilla(j.casilla_actual), ")\toperacion ", j.operar(), "\tdinero ", j.dinero)
        
        #Registro de la partida
        reg_propiedades = []
        for p in j.propiedades:
          reg_propiedades.append(p.nombre)
          if p.nombre == "Reef Resort":
            juego.registro.update(edificios_reef_resort=p.edificios_construidos)
            for k, v in juego.tablero.entradas_casillas.items():
              if v != '' and getattr(v, 'nombre') == p.nombre:
                if 'casillas_entradas_reef_resort' in juego.registro.keys():
                  cadena = juego.registro['casillas_entradas_reef_resort']
                  cadena += ", " + str(k)
                  juego.registro.update(casillas_entradas_reef_resort = cadena)
                else:
                  juego.registro.update(casillas_entradas_reef_resort = str(k))
          elif p.nombre == "Dragon gate":
            juego.registro.update(edificios_dragon_gate=p.edificios_construidos)
            for k, v in juego.tablero.entradas_casillas.items():
              if v != '' and getattr(v, 'nombre') == p.nombre:
                if 'casillas_entradas_dragon_gate' in juego.registro.keys():
                  cadena = juego.registro['casillas_entradas_dragon_gate']
                  cadena += ", " + str(k)
                  juego.registro.update(casillas_entradas_dragon_gate = cadena)
                else:
                  juego.registro.update(casillas_entradas_dragon_gate = str(k))
          elif p.nombre == "Up Town towers":
            juego.registro.update(edificios_up_town=p.edificios_construidos)
            for k, v in juego.tablero.entradas_casillas.items():
              if v != '' and getattr(v, 'nombre') == p.nombre:
                if 'casillas_entradas_up_town' in juego.registro.keys():
                  cadena = juego.registro['casillas_entradas_up_town']
                  cadena += ", " + str(k)
                  juego.registro.update(casillas_entradas_up_town = cadena)
                else:
                  juego.registro.update(casillas_entradas_up_town = str(k))
          elif p.nombre == "Artika":
            juego.registro.update(edificios_artika=p.edificios_construidos)
            for k, v in juego.tablero.entradas_casillas.items():
              if v != '' and getattr(v, 'nombre') == p.nombre:
                if 'casillas_entradas_artika' in juego.registro.keys():
                  cadena = juego.registro['casillas_entradas_artika']
                  cadena += ", " + str(k)
                  juego.registro.update(casillas_entradas_artika = cadena)
                else:
                  juego.registro.update(casillas_entradas_artika = str(k))
          elif p.nombre == "Coconut":
            juego.registro.update(edificios_coconut=p.edificios_construidos)
            for k, v in juego.tablero.entradas_casillas.items():
              if v != '' and getattr(v, 'nombre') == p.nombre:
                if 'casillas_entradas_coconut' in juego.registro.keys():
                  cadena = juego.registro['casillas_entradas_coconut']
                  cadena += ", " + str(k)
                  juego.registro.update(casillas_entradas_coconut = cadena)
                else:
                  juego.registro.update(casillas_entradas_coconut = str(k))
          elif p.nombre == "Reine":
            juego.registro.update(edificios_reine=p.edificios_construidos)
            for k, v in juego.tablero.entradas_casillas.items():
              if v != '' and getattr(v, 'nombre') == p.nombre:
                if 'casillas_entradas_reine' in juego.registro.keys():
                  cadena = juego.registro['casillas_entradas_reine']
                  cadena += ", " + str(k)
                  juego.registro.update(casillas_entradas_reine = cadena)
                else:
                  juego.registro.update(casillas_entradas_reine = str(k))
          elif p.nombre == "Al Walid":
            juego.registro.update(edificios_al_walid=p.edificios_construidos)
            for k, v in juego.tablero.entradas_casillas.items():
              if v != '' and getattr(v, 'nombre') == p.nombre:
                if 'casillas_entradas_al_walid' in juego.registro.keys():
                  cadena = juego.registro['casillas_entradas_al_walid']
                  cadena += ", " + str(k)
                  juego.registro.update(casillas_entradas_al_walid = cadena)
                else:
                  juego.registro.update(casillas_entradas_al_walid = str(k))
          elif p.nombre == "Zebra Lodge":
            juego.registro.update(edificios_zebra_lodge=p.edificios_construidos)
            for k, v in juego.tablero.entradas_casillas.items():
              if v != '' and getattr(v, 'nombre') == p.nombre:
                if 'casillas_entradas_zebra_lodge' in juego.registro.keys():
                  cadena = juego.registro['casillas_entradas_zebra_lodge']
                  cadena += ", " + str(k)
                  juego.registro.update(casillas_entradas_zebra_lodge = cadena)
                else:
                  juego.registro.update(casillas_entradas_zebra_lodge = str(k))

        juego.registro.update(partida=num_partida, tirada=num_tirada, jugador=j.nombre, casilla=j.casilla_actual, valor_casilla=juego.tablero.valor_casilla(j.casilla_actual), 
                              dinero=j.dinero, dinero_banca=juego.tablero.dinero_banca, entradas_sin_propiedad=j.entradas_sin_propiedad, propiedades_jugador=", ".join(reg_propiedades),
                              bancarrota_jugador="no")
        df = df.append(juego.registro, ignore_index=True)

      else:
        print(str(num_partida) + "-" + str(num_tirada) + "-> " + j.nombre + " estÃ¡ en bancarrota")
        #Registro de la partida
        juego.registro.update(partida=num_partida, tirada=num_tirada, jugador=j.nombre, casilla=j.casilla_actual, valor_casilla=juego.tablero.valor_casilla(j.casilla_actual), 
                              dinero=j.dinero, dinero_banca=juego.tablero.dinero_banca,bancarrota_jugador="si", operacion_jugador="Se retira de la partida")
        df = df.append(juego.registro, ignore_index=True)
        juego.jugadores.remove(j)

      #time.sleep(0.1)

  else:
    num_tirada +=1
    juego.registro.update(partida=num_partida, tirada=num_tirada, jugador=juego.jugadores[0].nombre, casilla=juego.jugadores[0].casilla_actual, valor_casilla=juego.tablero.valor_casilla(juego.jugadores[0].casilla_actual), 
                        dinero=juego.jugadores[0].dinero, dinero_banca=juego.tablero.dinero_banca, entradas_sin_propiedad=juego.jugadores[0].entradas_sin_propiedad, propiedades_jugador=", ".join(reg_propiedades),
                        bancarrota_jugador="no", ganador="si")
    df = df.append(juego.registro, ignore_index=True)
    print(str(num_partida) + "-" + str(num_tirada) + "-> ha ganado " + juego.jugadores[0].nombre)

df

df.to_csv("Quinientas_Partidas_Hotel.csv", index=False)